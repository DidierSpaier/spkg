source code guide
-----------------
  sql.{c,h}: Simplified sqlite3 interface with better error handling.

  Supported error handling methods:
    - close db and exit
    - longjmp to the caller's error handler
    - print err msg and return (retval = -1)
    - ignore error and return (retval = -1)

  untgz.{c,h}: Extractor/browser for tgz archives.
  
  sys.{c,h}: Simplified system interface.
    - check file type
    - implementation of rm -rf and mkdir -p
    
  pkgdb.{c,h}: Interface to the package database.
    - routines to modify fastpkg database
    - routines to convert between legacy and fastpkg databases

  --------------------------------
  |         cli frontend         |
  --------------------------------
                  |
  --------------------------------
  |         fastpkg api          |
  --------------------------------
         |                |
  ---------------         |
  |  pkgdb api  |         |
  ---------------         |
         |                |
  ---------------  ---------------
  |   sql api   |  |  untgz api  |
  ---------------  ---------------
         |                |
  ---------------  ---------------
  |   sqlite3   |  |     zlib    |
  ---------------  ---------------

installpkg
----------
 - umask 022, setuid 0
 - fix /var/log/{packages,scripts,removed_packages,removed_scripts,setup}
 - make sure it is not link and it is directory with right perms
 - extract package description
 - extract doinst.sh symbolic links
   warn mode:
   - check symbolic links in the doinst.sh and test if locations, that are to 
     be removed exist in the tree
   - check all other tgz files for overwriting
 - extract files
 - ldconfig
 - doinst.sh
 - update package database
 - cleanup install/doinst.sh and slack-*
 - do all this with respect to ROOT env. variable

upgradepkg
----------
 - installpkg
 - update db
 - remove oldpkg

removepkg
---------
 - check if file is not used by other packages
 - remove it (to temp dir)
 - updatedb

package database (pkgdb)
------------------------

pkgdb functions:
  - sync_fastpkgdb_to_legacydb (synchronize legacy database with fastpkg database)
  - sync_legacydb_to_fastpkgdb (fastpkg db -> legacy db)

  Following funcs are performed in one transaction:
  - add_package
  - remove_package
  - upgrade_package
  - get_package
  
TODO: design package representation structure

fastpkg api
-----------
  Every function shoud be able to run in a dry mode and verbose mode:
  - upgradepkg
  - removepkg
  - installpkg
  - checkpkg

